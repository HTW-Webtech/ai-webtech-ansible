---
- name: Collect all configured account names
  shell: cat /opt/aris/config/Usersfile
  register: account_names

- name: Output all account names
  debug:
    msg={{ item }}
  with_items: "{{ account_names.stdout_lines }}"

# FIXME: aris password should never be exposed. Configure via ENV var
- name: Create a postgres user
  postgresql_user:
    login_user=aris
    login_password=aris
    user={{ item }}
    encrypted=no
    password={{ item }}
    role_attr_flags=NOSUPERUSER
  with_items: "{{ account_names.stdout_lines }}"

# FIXME: aris password should never be exposed. Configure via ENV var
- name: Create a postgres db for the user
  postgresql_db:
    login_user=aris
    login_password=aris
    name={{ item }}
    owner={{ item }}
    encoding='UTF-8'
    state=present
  with_items: "{{ account_names.stdout_lines }}"

- name: Ensure OS user account exists (access to git-shell limited)
  user:
    name={{ item }}
    createhome=yes
    shell=/usr/bin/git-shell
    state=present
  with_items: "{{ account_names.stdout_lines }}"

- name: Create .ssh dir for users
  file:
    path=~{{ item }}/.ssh
    state=directory
    owner={{ item }}
    group={{ item }}
    mode=0600
  with_items: "{{ account_names.stdout_lines }}"

- name: Create users app dir
  file:
    state=directory
    path=/var/apps/{{ item }}
    owner={{ item }}
    group=www-data
    mode=ug+rwx
  with_items: "{{ account_names.stdout_lines }}"

# Prep user permissions, ssh access
# Create user without login!!
# - shell: sudo adduser myappuser
# - shell: mkdir -p ~myappuser/.ssh
# - shell: sh -c "cat $HOME/.ssh/authorized_keys >> ~myappuser/.ssh/authorized_keys"
# - shell: chown -R myappuser: ~myappuser/.ssh
# - shell: chmod 700 ~myappuser/.ssh
# - shell: sh -c "chmod 600 ~myappuser/.ssh/*"

# Prep app setup
# - shell: mkdir -p /var/www/myapp
# - shell: "chown myappuser: /var/www/myapp"
# - shell: "sudo -u myappuser -H git clone git://github.com/grekko/bettercooking.git /var/www/myapp/code"

# This has to run after each git push -> git hook
# - shell: "bundle install --deployment --without development test"
# - shell: "bundle exec rake assets:precompile db:migrate"
# - shell: "passenger-config restart-app $(pwd)"

# Secrets are provided by my service which writes to an ENV file ?

# Setup virtual host in nginx
# See vhost.conf.sample


