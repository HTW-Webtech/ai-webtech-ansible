---
- name: Ensure OS user account exists (access to git-shell limited)
  user:
    name={{ item.key }}
    createhome=yes
    shell=/usr/bin/git-shell
    state=present
    groups=ssh-clients
    append=yes
  with_dict: "{{ aris_apps }}"

- name: Create .ssh dir for users
  file:
    path=~{{ item.key }}/.ssh
    state=directory
    owner={{ item.key }}
    group={{ item.key }}
    mode=u=rx,g=,o=
  with_dict: "{{ aris_apps }}"

- name: Configure public ssh keys .ssh/authorized-keys
  lineinfile:
    line="{{ item.value.ssh_key }}"
    dest=~{{ item.key }}/.ssh/authorized_keys
    owner={{ item.key }}
    group={{ item.key }}
    mode=u=rx,g=,o=
    state=present
    create=yes
  when: item.value.ssh_key is defined
  with_dict: "{{ aris_apps }}"

- name: Create users app dir (git-repo)
  file:
    state=directory
    path=/var/apps/{{ item.key }}
    mode=ug+rwx,o=rx
    owner={{ item.key }}
    group={{ item.key }}
  with_dict: "{{ aris_apps }}"

- name: Create users app code/git dir
  file:
    state=directory
    path=/var/apps/{{ item.key }}/code
    mode=ug+rwx,o=rx
    owner={{ item.key }}
    group={{ item.key }}
  with_dict: "{{ aris_apps }}"

- name: Create users app logs dir
  file:
    state=directory
    force=yes
    path=/var/apps/{{ item.key }}/logs
    mode=ug+rwx,o=rx
    owner={{ item.key }}
    group={{ item.key }}
  with_dict: "{{ aris_apps }}"

- name: Create an empty default public-dir
  file:
    state=directory
    path=/var/apps/{{ item.key }}/default
    mode=ug+rwx,o=rx
    owner={{ item.key }}
    group={{ item.key }}
  with_dict: "{{ aris_apps }}"

- name: Create a basic hello world page in the default public dir
  template:
    src=nginx/default/index.html.j2
    dest=/var/apps/{{ item.key }}/default/index.html
    mode=ug+rwx,o=rx
    owner={{ item.key }}
    group={{ item.key }}
  with_dict: "{{ aris_apps }}"

# FIXME: SMELL!!
- name: Symlink the default-public dir to public if no other public dir exists
  shell: 'cd /var/apps/{{ item.key }}; test -e public || ln -sf default-public public && chown -R {{ item.key }}:{{ item.key }} public'
  with_dict: "{{ aris_apps }}"

- name: Initialize empty git repository with basic config if not existant
  shell: stat .git || git init && git config receive.denyCurrentBranch ignore
    chdir=/var/apps/{{ item.key }}/code
  with_dict: "{{ aris_apps }}"

- name: Fix ownership for git repository
  file:
    state=directory
    path=/var/apps/{{ item.key }}/code
    owner={{ item.key }}
    group={{ item.key }}
    recurse=yes
  with_dict: "{{ aris_apps }}"

- name: Configure proper git post-update hook
  template:
    src=git-hooks/post-update.j2
    dest=/var/apps/{{ item.key }}/code/.git/hooks/post-update
    owner={{ item.key }}
    group={{ item.key }}
    mode=ug+rwx,o=xr
  with_dict: "{{ aris_apps }}"

